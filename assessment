#!/usr/bin/env python

from statistics import mean
import click
import pprint
import configparser

SPRACHE_KEY = 'sprache'
INHALT_KEY = 'inhalt'
FORMATIERUNG_KEY = 'formatierung'
QUELLENANGABE_KEY = 'quellenangabe'
IMPLEMENTIERUNG_KEY = 'implementierung'
EVALUATION_KEY = 'evaluation'
GEWICHTE_KEY = 'gewichte'


class GradeAverages:
    def __init__(self, sprache, inhalt, formatierung, quellenangabe,
                 implementierung, evaluation):
        self.sprache = sprache
        self.inhalt = inhalt
        self.formatierung = formatierung
        self.quellenangabe = quellenangabe
        self.implementierung = implementierung
        self.evaluation = evaluation


class GradeSections:
    def __init__(self, sprache, inhalt, formatierung, quellenangabe,
                 implementierung, evaluation):
        self.sprache = sprache
        self.inhalt = inhalt
        self.formatierung = formatierung
        self.quellenangabe = quellenangabe
        self.implementierung = implementierung
        self.evaluation = evaluation


def get_weights(config):

    weights = dict(config.items(GEWICHTE_KEY))
    weights = {k: int(v) for k, v in weights.items()}

    return weights


def print_weights(weights):

    click.echo(pprint.pformat(weights))


def config_items_to_dict(config_items):

    dictionary = dict(config_items)
    dictionary = {k: int(v) for k, v in dictionary.items()}

    return dictionary


def print_grades(averages, overall, overall_rounded):

    click.echo(f'{"Sprache:":<28}{averages.sprache:>3.2f}')
    click.echo(f'{"Inhalt:":<28}{averages.inhalt:>3.2f}')
    click.echo(f'{"Methode – Formatierung:":<28}{averages.formatierung:>3.2f}')
    click.echo(
        f'{"Methode – Quellenangabe:":<28}{averages.quellenangabe:>3.2f}')
    click.echo(
        f'{"Methode – Implementierung:":<28}{averages.implementierung:>3.2f}')
    click.echo(f'{"Methode – Evaluation:":<28}{averages.evaluation:>3.2f}')
    click.echo(f'{"-"*32}')
    click.echo(f'{"Durchschnitt:":<28}{overall:>3.2f}')
    click.echo(f'{"Gesamtnote:":<28}{overall_rounded:>3.1f}')


def get_grade_sections(config):

    sprache = config_items_to_dict(config.items(SPRACHE_KEY))

    inhalt = config_items_to_dict(config.items(INHALT_KEY))

    formatierung = config_items_to_dict(config.items(FORMATIERUNG_KEY))

    quellenangabe = config_items_to_dict(config.items(QUELLENANGABE_KEY))

    implementierung = config_items_to_dict(config.items(IMPLEMENTIERUNG_KEY))

    evaluation = config_items_to_dict(config.items(EVALUATION_KEY))

    grade_sections = GradeSections(sprache, inhalt, formatierung,
                                   quellenangabe, implementierung, evaluation)

    return grade_sections


def calculate_averages(config):

    grade_sections = get_grade_sections(config)

    sprache_avg = mean(grade_sections.sprache.values())
    inhalt_avg = mean(grade_sections.inhalt.values())
    formatierung_avg = mean(grade_sections.formatierung.values())
    quellenangabe_avg = mean(grade_sections.quellenangabe.values())
    implementierung_avg = mean(grade_sections.implementierung.values())
    evaluation_avg = mean(grade_sections.evaluation.values())

    averages = GradeAverages(sprache_avg, inhalt_avg, formatierung_avg,
                             quellenangabe_avg, implementierung_avg,
                             evaluation_avg)

    return averages


def load_grades(grades_file):

    config = configparser.ConfigParser()
    config.read(grades_file)
    return config


def calculate_overall(averages, gewichte):

    sprache_weighted = averages.sprache * gewichte[SPRACHE_KEY]
    inhalt_weighted = averages.inhalt * gewichte[INHALT_KEY]
    formatierung_weighted = averages.formatierung * gewichte[FORMATIERUNG_KEY]
    quellenangabe_weighted = averages.quellenangabe * gewichte[
        QUELLENANGABE_KEY]
    implementierung_weighted = averages.implementierung * gewichte[
        IMPLEMENTIERUNG_KEY]
    evaluation_weighted = averages.evaluation * gewichte[EVALUATION_KEY]

    overall = sprache_weighted \
        + inhalt_weighted \
        + formatierung_weighted \
        + quellenangabe_weighted \
        + implementierung_weighted \
        + evaluation_weighted
    overall /= sum(gewichte.values())

    return overall


def round_overall(overall):

    integer = overall // 1
    decimals = overall % 1

    if decimals > 0.15 and decimals <= 0.5:
        overall_rounded = integer + 0.3
    elif decimals > 0.5 and decimals <= 0.85:
        overall_rounded = integer + 0.7
    elif decimals > 0.85:
        overall_rounded = integer + 1
    else:
        overall_rounded = integer

    return overall_rounded


@click.command()
@click.argument('grades', type=click.Path(exists=True), required=True, nargs=1)
@click.option(
    '--weights', is_flag=True, help='Show the section\'s weights and exit.')
@click.version_option('1.0.0')
@click.pass_context
def main(ctx, grades, weights):

    config = load_grades(grades)
    section_weights = get_weights(config)

    if weights:
        print_weights(section_weights)
        ctx.exit()

    averages = calculate_averages(config)
    overall = calculate_overall(averages, section_weights)
    overall_rounded = round_overall(overall)

    print_grades(averages, overall, overall_rounded)


if __name__ == '__main__':
    main()
